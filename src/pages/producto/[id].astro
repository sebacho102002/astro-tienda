---
export const prerender = false;

import { supabase } from "../../lib/supabaseClient";

const { id } = Astro.params;

// Obtener el producto desde Supabase
const { data: product, error } = await supabase
  .from("productos")
  .select("*")
  .eq("id", id)
  .single();

if (error || !product) {
  return Astro.redirect("/404");
}

// Funci√≥n para formatear precios
function formatPrice(price: number) {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP'
  }).format(price);
}
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{product.title} - TuMarca</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100">
    <!-- Header -->
    <header class="bg-white shadow">
      <div class="container mx-auto px-6 py-4">
        <div class="flex items-center justify-between">
          <a href="/" class="text-2xl font-bold text-purple-600">TuMarca</a>
          <nav class="flex items-center space-x-4">
            <a href="/" class="text-gray-700 hover:text-purple-600">Inicio</a>
            <a href="/carrito" class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 flex items-center">
              üõí Carrito 
              <span id="cart-badge" class="bg-red-500 text-white text-xs rounded-full px-2 py-1 ml-2 hidden">0</span>
            </a>
          </nav>
        </div>
      </div>
    </header>

    <!-- Producto -->
    <main class="container mx-auto px-6 py-12">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden max-w-6xl mx-auto">
        <div class="md:flex">
          <!-- Imagen del producto -->
          <div class="md:flex-shrink-0 md:w-1/2">
            <!-- Galer√≠a de im√°genes -->
            <div class="relative">
              <!-- Imagen principal -->
              <div class="aspect-square overflow-hidden">
                <img 
                  id="main-image"
                  src={product.images?.[0] || "/placeholder.jpg"} 
                  alt={product.title}
                  class="h-full w-full object-cover transition-opacity duration-300"
                  onerror="this.src='/placeholder.jpg'"
                />
              </div>
              
              <!-- Botones de navegaci√≥n (solo si hay m√°s de 1 imagen) -->
              {product.images && product.images.length > 1 && (
                <>
                  <button 
                    id="prev-image"
                    onclick="changeImage(-1)"
                    class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white rounded-full p-2 hover:bg-opacity-75 transition-opacity"
                  >
                    ‚Üê
                  </button>
                  <button 
                    id="next-image"
                    onclick="changeImage(1)"
                    class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white rounded-full p-2 hover:bg-opacity-75 transition-opacity"
                  >
                    ‚Üí
                  </button>
                  
                  <!-- Indicadores de imagen -->
                  <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
                    {product.images.map((image: string, index: number) => (
                      <button 
                        class={`w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-75 transition-opacity ${index === 0 ? 'bg-opacity-100' : ''}`}
                        onclick={`goToImage(${index})`}
                        data-index={index}
                      ></button>
                    ))}
                  </div>
                </>
              )}
            </div>
            
            <!-- Miniaturas (solo si hay m√°s de 1 imagen) -->
            {product.images && product.images.length > 1 && (
              <div class="flex space-x-2 mt-4 overflow-x-auto">
                {product.images.map((image: string, index: number) => (
                  <button 
                    onclick={`goToImage(${index})`}
                    class={`flex-shrink-0 w-16 h-16 border-2 border-transparent hover:border-purple-500 transition-colors ${index === 0 ? 'border-purple-500' : ''}`}
                    data-thumbnail={index}
                  >
                    <img 
                      src={image || "/placeholder.jpg"}
                      alt={`${product.title} - imagen ${index + 1}`}
                      class="w-full h-full object-cover rounded"
                      onerror="this.src='/placeholder.jpg'"
                    />
                  </button>
                ))}
              </div>
            )}
          </div>

          <!-- Informaci√≥n del producto -->
          <div class="p-8 md:w-1/2">
            <h1 class="text-3xl font-bold text-gray-900 mb-4">{product.title}</h1>
            <p class="text-gray-600 mb-6">{product.description}</p>
            
            <div class="mb-6">
              <span class="text-4xl font-bold text-purple-600">{formatPrice(product.price)}</span>
              {product.stock > 0 ? (
                <p class="text-green-600 mt-2">‚úÖ En stock ({product.stock} disponibles)</p>
              ) : (
                <p class="text-red-600 mt-2">‚ùå Sin stock</p>
              )}
            </div>

            {product.stock > 0 && (
              <div class="space-y-4">
                <!-- Selector de cantidad -->
                <div class="flex items-center space-x-4">
                  <label class="text-sm font-medium text-gray-700">Cantidad:</label>
                  <div class="flex items-center border rounded">
                    <button onclick="changeQuantity(-1)" class="px-3 py-2 hover:bg-gray-100">-</button>
                    <input type="number" id="quantity" value="1" min="1" max={product.stock} 
                           class="w-16 text-center border-0 focus:ring-0" />
                    <button onclick="changeQuantity(1)" class="px-3 py-2 hover:bg-gray-100">+</button>
                  </div>
                </div>

                <!-- Bot√≥n agregar al carrito -->
                <button 
                  id="add-to-cart"
                  onclick="addToCart()"
                  class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 mb-4"
                >
                  üõí Agregar al Carrito
                </button>

                <!-- Botones de compra -->
                <div class="space-y-3">
                  <!-- MercadoPago -->
                  <button 
                    onclick="buyWithMercadoPago()"
                    class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center"
                  >
                    <img src="https://www.mercadopago.com/org-img/MP3/home/logomp3.gif" alt="MercadoPago" class="h-6 mr-2">
                    Comprar Ahora con MercadoPago
                  </button>
                  
                  <!-- WhatsApp -->
                  <button 
                    onclick="buyWithWhatsApp()"
                    class="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center"
                  >
                    <svg class="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                    </svg>
                    Comprar por WhatsApp
                  </button>
                </div>

                <div class="text-xs text-gray-500 text-center mt-3 space-y-1">
                  <p>üí≥ Pago inmediato y seguro con MercadoPago</p>
                  <p>üì± O coordina el pago por WhatsApp</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>

    <!-- Script principal -->
    <script src="/cart.js" type="module"></script>
    
    <script type="module" define:vars={{ 
      productId: product.id, 
      productTitle: product.title, 
      productDesc: product.description || '', 
      productPrice: product.price, 
      productStock: product.stock, 
      productImage: product.images?.[0] || '/placeholder.jpg' 
    }}>
      // Esperar un poco para que se cargue el script del carrito
      setTimeout(() => {
        // Datos del producto
        const productData = {
          id: productId,
          name: productTitle,
          title: productTitle,
          description: productDesc,
          price: productPrice,
          stock: productStock,
          image_url: productImage
        };

        let quantity = 1;

        // Cambiar cantidad
        window.changeQuantity = function(change) {
          const newQuantity = quantity + change;
          if (newQuantity >= 1 && newQuantity <= productData.stock) {
            quantity = newQuantity;
            const qtyInput = document.getElementById('quantity');
            if (qtyInput) qtyInput.value = quantity;
          }
        };

        // Agregar al carrito
        window.addToCart = function() {
          console.log('üõí Intentando agregar al carrito:', productData);
          const productToAdd = { ...productData, quantity: quantity };
          
          if (window.cartManager) {
            console.log('‚úÖ CartManager encontrado, agregando producto');
            window.cartManager.addProduct(productToAdd);
          } else {
            console.error('‚ùå CartManager no disponible');
            alert('Error: Sistema de carrito no disponible');
          }
        };

        // Comprar con MercadoPago
        window.buyWithMercadoPago = async function() {
          try {
            const button = event.target;
            const originalText = button.textContent;
            button.textContent = 'Procesando...';
            button.disabled = true;

            const nombre = prompt('Nombre completo:');
            const email = prompt('Email:');
            const direccion = prompt('Direcci√≥n de env√≠o:');
            
            if (!nombre || !email || !direccion) {
              alert('Todos los campos son requeridos');
              return;
            }

            const response = await fetch('/api/mercadopago/create-preference', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                productId: productData.id,
                title: productData.title,
                description: productData.description,
                price: productData.price,
                quantity: quantity,
                clienteInfo: { nombre, email, direccion }
              })
            });

            const data = await response.json();
            
            if (data.success && data.init_point) {
              window.location.href = data.init_point;
            } else {
              // Manejo especial para credenciales inv√°lidas
              if (data.code === 'INVALID_CREDENTIALS') {
                alert(`üîë ${data.error}\n\n${data.details}`);
              } else if (data.code === 'INVALID_ACCESS_TOKEN') {
                alert(`üîë ${data.error}\n\n${data.details}`);
              } else {
                alert(`Error procesando el pago: ${data.error || 'Error desconocido'}\n\n${data.details || 'Por favor intenta nuevamente.'}`);
              }
            }
          } catch (error) {
            alert('Error de conexi√≥n');
          } finally {
            button.textContent = originalText;
            button.disabled = false;
          }
        };

        // üì± Comprar con WhatsApp
        window.buyWithWhatsApp = function() {
          try {
            console.log('üì± Iniciando compra por WhatsApp...');
            
            // Pedir informaci√≥n del cliente
            const nombre = prompt('üë§ Nombre completo:');
            if (!nombre) {
              alert('‚ùå El nombre es requerido');
              return;
            }
            
            const email = prompt('üìß Email:');
            if (!email || !email.includes('@')) {
              alert('‚ùå El email es requerido y debe ser v√°lido');
              return;
            }
            
            const telefono = prompt('üì± Tel√©fono (con c√≥digo de pa√≠s):');
            if (!telefono) {
              alert('‚ùå El tel√©fono es requerido');
              return;
            }
            
            const direccion = prompt('üìç Direcci√≥n de entrega:');
            if (!direccion) {
              alert('‚ùå La direcci√≥n es requerida');
              return;
            }

            // Crear informaci√≥n del cliente
            const clientInfo = { nombre, email, telefono, direccion };
            
            // Crear producto para WhatsApp
            const productForWhatsApp = [{
              ...productData,
              quantity: quantity
            }];

            // Usar el WhatsAppManager del carrito
            if (window.WhatsAppManager) {
              const success = window.WhatsAppManager.sendOrder(productForWhatsApp, clientInfo);
              
              if (success) {
                alert('‚úÖ ¬°Perfecto!\n\nSe abri√≥ WhatsApp con tu pedido.\nPuedes revisar y modificar el mensaje antes de enviarlo.\n\n¬°Gracias por tu pedido! üõçÔ∏è');
              }
            } else {
              // Fallback: generar mensaje manualmente
              const total = productData.price * quantity;
              const message = `¬°Hola! Me interesa comprar:\n\n` +
                            `üì¶ *PRODUCTO:*\n` +
                            `‚Ä¢ ${productData.title}\n` +
                            `‚Ä¢ Cantidad: ${quantity}\n` +
                            `‚Ä¢ Precio: ${new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(productData.price)}\n` +
                            `‚Ä¢ Total: ${new Intl.NumberFormat('es-CO', { style: 'currency', currency: 'COP' }).format(total)}\n\n` +
                            `üë§ *MIS DATOS:*\n` +
                            `‚Ä¢ Nombre: ${nombre}\n` +
                            `‚Ä¢ Email: ${email}\n` +
                            `‚Ä¢ Tel√©fono: ${telefono}\n` +
                            `‚Ä¢ Direcci√≥n: ${direccion}\n\n` +
                            `Por favor confirma disponibilidad y coordina el pago. ¬°Gracias! üõçÔ∏è`;
              
              const encodedMessage = encodeURIComponent(message);
              const whatsappUrl = `https://wa.me/573001234567?text=${encodedMessage}`;
              window.open(whatsappUrl, '_blank');
              
              alert('‚úÖ ¬°Perfecto!\n\nSe abri√≥ WhatsApp con tu pedido.\n¬°Gracias por tu compra! üõçÔ∏è');
            }
            
          } catch (error) {
            console.error('‚ùå Error en compra por WhatsApp:', error);
            alert('‚ùå Hubo un error. Por favor intenta nuevamente.');
          }
        };

        // Inicializar
        const quantityInput = document.getElementById('quantity');
        if (quantityInput) {
          quantityInput.addEventListener('input', function(e) {
            quantity = Math.max(1, Math.min(productData.stock, parseInt(e.target.value) || 1));
            e.target.value = quantity;
          });
        }

        // üñºÔ∏è Funcionalidad de galer√≠a de im√°genes
        const images = productData.images || [];
        let currentImageIndex = 0;

        // Funci√≥n para cambiar imagen
        window.changeImage = function(direction) {
          if (images.length <= 1) return;
          
          currentImageIndex += direction;
          
          if (currentImageIndex >= images.length) {
            currentImageIndex = 0;
          } else if (currentImageIndex < 0) {
            currentImageIndex = images.length - 1;
          }
          
          updateImageDisplay();
        };

        // Funci√≥n para ir a una imagen espec√≠fica
        window.goToImage = function(index) {
          if (index >= 0 && index < images.length) {
            currentImageIndex = index;
            updateImageDisplay();
          }
        };

        // Actualizar la visualizaci√≥n de la imagen
        function updateImageDisplay() {
          const mainImage = document.getElementById('main-image');
          if (mainImage && images[currentImageIndex]) {
            mainImage.src = images[currentImageIndex];
            
            // Actualizar indicadores
            const indicators = document.querySelectorAll('[data-index]');
            indicators.forEach((indicator, index) => {
              if (index === currentImageIndex) {
                indicator.classList.remove('bg-opacity-50');
                indicator.classList.add('bg-opacity-100');
              } else {
                indicator.classList.remove('bg-opacity-100');
                indicator.classList.add('bg-opacity-50');
              }
            });
            
            // Actualizar miniaturas
            const thumbnails = document.querySelectorAll('[data-thumbnail]');
            thumbnails.forEach((thumbnail, index) => {
              if (index === currentImageIndex) {
                thumbnail.classList.add('border-purple-500');
                thumbnail.classList.remove('border-transparent');
              } else {
                thumbnail.classList.remove('border-purple-500');
                thumbnail.classList.add('border-transparent');
              }
            });
          }
        }

        // Navegaci√≥n con teclado
        document.addEventListener('keydown', function(e) {
          if (images.length > 1) {
            if (e.key === 'ArrowLeft') {
              changeImage(-1);
            } else if (e.key === 'ArrowRight') {
              changeImage(1);
            }
          }
        });
        
        console.log('üéØ P√°gina de producto inicializada correctamente');
      }, 500); // Esperar 500ms para que se cargue el carrito
    </script>
  </body>
</html>
