---
export const prerender = false;

import DashboardLayout from "../../layouts/DashboardLayout.astro";
import { supabase } from "../../lib/supabaseClient.js";

// Obtener productos con informaci√≥n de pedidos asociados
const { data: productos, error } = await supabase
  .from("productos")
  .select(`
    *,
    pedidos:pedidos(count)
  `)
  .order("created_at", { ascending: false });

// Obtener estad√≠sticas de pedidos por producto
const { data: pedidosStats } = await supabase
  .from("pedidos")
  .select("producto_id")
  .eq("status", "completed");

// Crear mapa de pedidos por producto
const pedidosMap = new Map();
if (pedidosStats) {
  pedidosStats.forEach(pedido => {
    const count = pedidosMap.get(pedido.producto_id) || 0;
    pedidosMap.set(pedido.producto_id, count + 1);
  });
}

console.log("üîç Productos cargados:", productos?.length || 0);
if (error) {
  console.error("‚ùå Error cargando productos:", error);
}
---

<DashboardLayout title="Gesti√≥n de Productos">
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-purple-700">Gesti√≥n de Productos</h1>
    <a href="/admin/nuevo-producto" class="inline-block">
      <button class="bg-purple-700 hover:bg-purple-800 text-white font-semibold px-6 py-3 rounded-lg shadow transition duration-300">
        ‚ûï Agregar Producto
      </button>
    </a>
  </div>

  {error && (
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
      <strong class="font-bold">‚ùå Error:</strong> No se pudieron cargar los productos.
      <p class="text-sm mt-1">{error.message}</p>
    </div>
  )}

  {productos && productos.length > 0 ? (
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <!-- Estad√≠sticas r√°pidas -->
      <div class="bg-purple-50 p-6 border-b">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-700">{productos.length}</div>
            <div class="text-sm text-gray-600">Total Productos</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">
              {productos.filter(p => p.stock > 0).length}
            </div>
            <div class="text-sm text-gray-600">En Stock</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-red-600">
              {productos.filter(p => p.stock === 0).length}
            </div>
            <div class="text-sm text-gray-600">Sin Stock</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600">
              {Array.from(pedidosMap.values()).reduce((sum, count) => sum + count, 0)}
            </div>
            <div class="text-sm text-gray-600">Pedidos Completados</div>
          </div>
        </div>
      </div>

      <!-- Tabla de productos -->
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Producto
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Precio
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Stock
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Categor√≠a
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Pedidos
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Pago Online
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {productos.map((producto) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <img 
                      src={producto.images?.[0] || '/placeholder.jpg'} 
                      alt={producto.title}
                      class="w-12 h-12 object-cover rounded-lg mr-4"
                      onerror="this.src='/placeholder.jpg'"
                    />
                    <div>
                      <div class="text-sm font-medium text-gray-900">
                        {producto.title}
                      </div>
                      <div class="text-sm text-gray-500">
                        SKU: {producto.sku || 'N/A'}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    ${producto.price}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    producto.stock > 10 ? 'bg-green-100 text-green-800' :
                    producto.stock > 0 ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {producto.stock} unidades
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {producto.category || '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-gray-900">
                    <span class="font-medium">{pedidosMap.get(producto.id) || 0}</span> pedidos
                  </div>
                  <div class="text-xs text-gray-500">
                    {pedidosMap.get(producto.id) > 0 ? 'Tiene dependencias' : 'Sin dependencias'}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                    producto.payment_config?.enabled 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {producto.payment_config?.enabled ? '‚úÖ Habilitado' : '‚ùå Deshabilitado'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                  <a 
                    href={`/producto/${producto.id}`}
                    class="text-blue-600 hover:text-blue-900"
                    target="_blank"
                  >
                    üëÅÔ∏è Ver
                  </a>
                  <a 
                    href={`/admin/editar-producto/${producto.id}`}
                    class="text-purple-600 hover:text-purple-900"
                  >
                    ‚úèÔ∏è Editar
                  </a>
                  <button
                    onclick={`deleteProduct('${producto.id}', '${producto.title}', event)`}
                    class="text-red-600 hover:text-red-900"
                  >
                    üóëÔ∏è Eliminar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  ) : (
    <div class="text-center py-12">
      <div class="text-6xl mb-4">üì¶</div>
      <h3 class="text-xl font-semibold text-gray-800 mb-2">No hay productos</h3>
      <p class="text-gray-600 mb-6">Comienza agregando tu primer producto</p>
      <a href="/admin/nuevo-producto" class="inline-block">
        <button class="bg-purple-700 hover:bg-purple-800 text-white font-semibold px-6 py-3 rounded-lg shadow transition duration-300">
          ‚ûï Agregar Primer Producto
        </button>
      </a>
    </div>
  )}

  <script is:inline>
    async function deleteProduct(id, title, event) {
      // Confirmar eliminaci√≥n con informaci√≥n adicional
      const confirmMessage = `¬øEst√°s seguro de que quieres eliminar "${title}"?\n\n‚ö†Ô∏è IMPORTANTE:\n‚Ä¢ Si este producto tiene pedidos asociados, no se podr√° eliminar\n‚Ä¢ Esta acci√≥n no se puede deshacer\n‚Ä¢ Se eliminar√° permanentemente de la base de datos`;
      
      if (!confirm(confirmMessage)) {
        return;
      }

      // Mostrar indicador de carga
      const button = event.target;
      const originalText = button.innerHTML;
      button.innerHTML = '‚è≥ Eliminando...';
      button.disabled = true;
      button.style.opacity = '0.6';

      try {
        console.log('üóëÔ∏è Enviando solicitud de eliminaci√≥n para producto:', id);
        
        const response = await fetch('/api/productos/delete', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id })
        });

        console.log('üì° Respuesta del servidor:', response.status);
        const data = await response.json();

        if (response.ok) {
          console.log('‚úÖ Producto eliminado:', data);
          
          // Mostrar mensaje de √©xito y recargar
          alert(`‚úÖ ${data.message}`);
          location.reload();
          
        } else if (response.status === 409) {
          // Producto tiene dependencias
          console.warn('‚ö†Ô∏è Producto tiene dependencias:', data);
          
          const dependencyMessage = `‚ö†Ô∏è No se puede eliminar "${title}"\n\n` +
                                   `Motivo: ${data.error}\n\n` +
                                   `üí° Para eliminar este producto:\n` +
                                   `1. Ve a la secci√≥n "Pedidos"\n` +
                                   `2. Elimina o modifica los pedidos que usan este producto\n` +
                                   `3. Luego regresa aqu√≠ para eliminarlo`;
          
          alert(dependencyMessage);
          
        } else {
          // Otros errores
          console.error('‚ùå Error del servidor:', data);
          alert(`‚ùå Error: ${data.error || 'No se pudo eliminar el producto'}\n\nDetalles: ${data.details || 'Error desconocido'}`);
        }
      } catch (error) {
        console.error('‚ùå Error de red:', error);
        alert('‚ùå Error de conexi√≥n\n\nNo se pudo conectar con el servidor. Verifica tu conexi√≥n a internet e int√©ntalo de nuevo.');
      } finally {
        // Restaurar bot√≥n
        button.innerHTML = originalText;
        button.disabled = false;
        button.style.opacity = '1';
      }
    }
  </script>
</DashboardLayout>
      }
    }

    // Hacer la funci√≥n global
    window.deleteProduct = deleteProduct;
  </script>
</DashboardLayout>
