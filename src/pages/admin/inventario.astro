---
export const prerender = false;

import DashboardLayout from "../../layouts/DashboardLayout.astro";
import StatCard from "../../components/StatCard.astro";
import { supabase } from "../../lib/supabaseClient.js";

// Obtener datos de inventario
const { data: productos, error } = await supabase
  .from('productos')
  .select(`
    id, title, sku, stock, price, category, created_at,
    pedidos:pedidos(cantidad)
  `)
  .order('stock', { ascending: true });

// Calcular m√©tricas de inventario
const inventario = {
  productosTotal: productos?.length || 0,
  stockBajo: productos?.filter(p => (p.stock || 0) <= 5).length || 0,
  sinStock: productos?.filter(p => (p.stock || 0) === 0).length || 0,
  valorTotal: productos?.reduce((sum, p) => sum + ((p.price || 0) * (p.stock || 0)), 0) || 0,
  masVendidos: productos?.sort((a, b) => {
    const ventasA = a.pedidos?.reduce((sum: number, p: any) => sum + (p.cantidad || 0), 0) || 0;
    const ventasB = b.pedidos?.reduce((sum: number, p: any) => sum + (p.cantidad || 0), 0) || 0;
    return ventasB - ventasA;
  }).slice(0, 5) || []
};

function formatPrice(price: number) {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP'
  }).format(price);
}

function getStockStatus(stock: number) {
  if (stock === 0) return { color: 'bg-red-100 text-red-800', text: 'Sin Stock' };
  if (stock <= 5) return { color: 'bg-yellow-100 text-yellow-800', text: 'Stock Bajo' };
  if (stock <= 10) return { color: 'bg-blue-100 text-blue-800', text: 'Stock Medio' };
  return { color: 'bg-green-100 text-green-800', text: 'Stock Alto' };
}
---

<DashboardLayout title="Control de Inventario">
  <div class="space-y-8">
    
    <!-- M√©tricas de Inventario -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <StatCard
        title="Productos Totales"
        value={inventario.productosTotal}
        description="En cat√°logo"
        color="blue"
        icon="üì¶"
      />
      
      <StatCard
        title="Stock Bajo"
        value={inventario.stockBajo}
        description="‚â§ 5 unidades"
        color="yellow"
        icon="‚ö†Ô∏è"
      />
      
      <StatCard
        title="Sin Stock"
        value={inventario.sinStock}
        description="Requeryen reposici√≥n"
        color="red"
        icon="üö´"
      />
      
      <StatCard
        title="Valor Inventario"
        value={formatPrice(inventario.valorTotal)}
        description="Valor total en stock"
        color="purple"
        icon="üí∞"
      />
    </div>

    <!-- Alertas de Stock -->
    {inventario.stockBajo > 0 && (
      <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
        <div class="flex items-center">
          <div class="text-yellow-600 text-xl mr-3">‚ö†Ô∏è</div>
          <div>
            <h3 class="text-lg font-semibold text-yellow-800">Alerta de Stock Bajo</h3>
            <p class="text-yellow-700">Tienes {inventario.stockBajo} productos con stock bajo (‚â§ 5 unidades). Es recomendable reabastecer pronto.</p>
          </div>
        </div>
      </div>
    )}

    <!-- Tabla de Inventario -->
    <div class="bg-white rounded-lg shadow">
      <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <h2 class="text-lg font-semibold text-gray-900">üìã Estado del Inventario</h2>
        <div class="flex space-x-2">
          <button class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            üì• Importar Stock
          </button>
          <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            üìä Exportar Reporte
          </button>
        </div>
      </div>
      
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Producto</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">SKU</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Stock Actual</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Valor Unitario</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Valor Total</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acciones</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            {productos?.map((producto: any) => {
              const stockStatus = getStockStatus(producto.stock || 0);
              const valorTotal = (producto.price || 0) * (producto.stock || 0);
              
              return (
                <tr class={`hover:bg-gray-50 ${producto.stock === 0 ? 'bg-red-25' : ''}`}>
                  <td class="px-6 py-4">
                    <div class="text-sm font-medium text-gray-900">{producto.title}</div>
                    <div class="text-sm text-gray-500">{producto.category || 'Sin categor√≠a'}</div>
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-900">
                    {producto.sku || 'N/A'}
                  </td>
                  <td class="px-6 py-4">
                    <div class="text-lg font-bold text-gray-900">{producto.stock || 0}</div>
                    <div class="text-xs text-gray-500">unidades</div>
                  </td>
                  <td class="px-6 py-4 text-sm font-medium text-gray-900">
                    {formatPrice(producto.price || 0)}
                  </td>
                  <td class="px-6 py-4 text-sm font-medium text-gray-900">
                    {formatPrice(valorTotal)}
                  </td>
                  <td class="px-6 py-4">
                    <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${stockStatus.color}`}>
                      {stockStatus.text}
                    </span>
                  </td>
                  <td class="px-6 py-4 text-sm space-x-2">
                    <button 
                      class="text-blue-600 hover:text-blue-900"
                      onclick={`ajustarStock('${producto.id}', '${producto.title}', ${producto.stock || 0})`}
                    >
                      ‚ûï‚ûñ Ajustar
                    </button>
                    <button 
                      class="text-green-600 hover:text-green-900"
                      onclick={`reabastecer('${producto.id}', '${producto.title}')`}
                    >
                      üì• Reabastecer
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Productos M√°s Vendidos -->
    <div class="bg-white rounded-lg shadow">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900">üèÜ Productos M√°s Vendidos</h2>
      </div>
      <div class="p-6">
        <div class="space-y-4">
          {inventario.masVendidos.map((producto: any, index: number) => {
            const totalVendido = producto.pedidos?.reduce((sum: number, p: any) => sum + (p.cantidad || 0), 0) || 0;
            
            return (
              <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                <div class="flex items-center space-x-4">
                  <div class="text-2xl font-bold text-purple-600">#{index + 1}</div>
                  <div>
                    <div class="font-medium text-gray-900">{producto.title}</div>
                    <div class="text-sm text-gray-500">SKU: {producto.sku || 'N/A'}</div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="text-lg font-bold text-gray-900">{totalVendido} vendidos</div>
                  <div class="text-sm text-gray-500">Stock: {producto.stock || 0}</div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>

  </div>

  <!-- Modal para Ajustar Stock -->
  <div id="modal-stock" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
    <div class="flex items-center justify-center min-h-full p-4">
      <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-lg font-semibold mb-4">Ajustar Stock</h3>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Producto:</label>
            <div id="producto-nombre" class="text-sm text-gray-900 font-medium"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Stock Actual:</label>
            <div id="stock-actual" class="text-lg font-bold text-gray-900"></div>
          </div>
          <div>
            <label for="nuevo-stock" class="block text-sm font-medium text-gray-700 mb-1">Nuevo Stock:</label>
            <input 
              type="number" 
              id="nuevo-stock" 
              min="0" 
              class="w-full p-2 border border-gray-300 rounded-lg"
              placeholder="Ingresa el nuevo stock"
            />
          </div>
          <div>
            <label for="motivo-ajuste" class="block text-sm font-medium text-gray-700 mb-1">Motivo del Ajuste:</label>
            <select id="motivo-ajuste" class="w-full p-2 border border-gray-300 rounded-lg">
              <option value="reabastecimiento">Reabastecimiento</option>
              <option value="correccion">Correcci√≥n de inventario</option>
              <option value="perdida">P√©rdida/Da√±o</option>
              <option value="devolucion">Devoluci√≥n</option>
              <option value="otro">Otro</option>
            </select>
          </div>
        </div>
        <div class="flex space-x-3 mt-6">
          <button 
            onclick="cerrarModalStock()"
            class="flex-1 bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300"
          >
            Cancelar
          </button>
          <button 
            onclick="confirmarAjusteStock()"
            class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
          >
            Confirmar Ajuste
          </button>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    let productoActual = null;

    function ajustarStock(id, nombre, stockActual) {
      productoActual = { id, nombre, stockActual };
      document.getElementById('producto-nombre').textContent = nombre;
      document.getElementById('stock-actual').textContent = stockActual + ' unidades';
      document.getElementById('nuevo-stock').value = stockActual;
      document.getElementById('modal-stock').classList.remove('hidden');
    }

    function reabastecer(id, nombre) {
      const cantidad = prompt(`¬øCu√°ntas unidades deseas agregar al stock de "${nombre}"?`);
      if (cantidad && !isNaN(cantidad) && parseInt(cantidad) > 0) {
        // Aqu√≠ ir√≠a la llamada a la API para ajustar el stock
        alert(`‚úÖ Se agregar√°n ${cantidad} unidades al stock de "${nombre}"`);
        location.reload();
      }
    }

    function cerrarModalStock() {
      document.getElementById('modal-stock').classList.add('hidden');
      productoActual = null;
    }

    function confirmarAjusteStock() {
      if (!productoActual) return;
      
      const nuevoStock = document.getElementById('nuevo-stock').value;
      const motivo = document.getElementById('motivo-ajuste').value;
      
      if (!nuevoStock || isNaN(nuevoStock) || parseInt(nuevoStock) < 0) {
        alert('‚ùå Por favor ingresa un stock v√°lido (n√∫mero mayor o igual a 0)');
        return;
      }

      // Aqu√≠ ir√≠a la llamada a la API para actualizar el stock
      alert(`‚úÖ Stock actualizado para "${productoActual.nombre}": ${productoActual.stockActual} ‚Üí ${nuevoStock}\nMotivo: ${motivo}`);
      cerrarModalStock();
      location.reload();
    }
  </script>
</DashboardLayout>
