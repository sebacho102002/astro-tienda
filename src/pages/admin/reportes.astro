---
export const prerender = false;

import DashboardLayout from "../../layouts/DashboardLayout.astro";
import StatCard from "../../components/StatCard.astro";
import { supabase } from "../../lib/supabaseClient.js";

// Definir rangos de fechas
const hoy = new Date();
const hace7dias = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
const hace30dias = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
const inicioMes = new Date(hoy.getFullYear(), hoy.getMonth(), 1);
const inicioA√±o = new Date(hoy.getFullYear(), 0, 1);

// Obtener datos para reportes
const [
  ventasHoy,
  ventasSemana,
  ventasMes,
  ventasA√±o,
  pedidosPorEstado,
  productosMasVendidos,
  clientesFrecuentes
] = await Promise.all([
  // Ventas de hoy
  supabase
    .from('pedidos')
    .select('precio_total, status')
    .gte('created_at', hoy.toISOString().split('T')[0])
    .in('status', ['pagado', 'enviado', 'entregado']),
    
  // Ventas √∫ltimos 7 d√≠as
  supabase
    .from('pedidos')
    .select('precio_total, status, created_at')
    .gte('created_at', hace7dias.toISOString())
    .in('status', ['pagado', 'enviado', 'entregado']),
    
  // Ventas del mes
  supabase
    .from('pedidos')
    .select('precio_total, status')
    .gte('created_at', inicioMes.toISOString())
    .in('status', ['pagado', 'enviado', 'entregado']),
    
  // Ventas del a√±o
  supabase
    .from('pedidos')
    .select('precio_total, status')
    .gte('created_at', inicioA√±o.toISOString())
    .in('status', ['pagado', 'enviado', 'entregado']),
    
  // Pedidos por estado
  supabase
    .from('pedidos')
    .select('status, created_at')
    .gte('created_at', hace30dias.toISOString()),
    
  // Productos m√°s vendidos
  supabase
    .from('pedidos')
    .select(`
      cantidad, 
      productos:producto_id (id, title, price)
    `)
    .in('status', ['pagado', 'enviado', 'entregado'])
    .gte('created_at', hace30dias.toISOString()),
    
  // Clientes frecuentes
  supabase
    .from('pedidos')
    .select('cliente_email, cliente_nombre, precio_total')
    .in('status', ['pagado', 'enviado', 'entregado'])
    .gte('created_at', hace30dias.toISOString())
]);

// Procesar datos
const reportes = {
  ventasHoy: ventasHoy.data?.reduce((sum, v) => sum + (v.precio_total || 0), 0) || 0,
  ventasSemana: ventasSemana.data?.reduce((sum, v) => sum + (v.precio_total || 0), 0) || 0,
  ventasMes: ventasMes.data?.reduce((sum, v) => sum + (v.precio_total || 0), 0) || 0,
  ventasA√±o: ventasA√±o.data?.reduce((sum, v) => sum + (v.precio_total || 0), 0) || 0,
  
  pedidosHoy: ventasHoy.data?.length || 0,
  pedidosSemana: ventasSemana.data?.length || 0,
  pedidosMes: ventasMes.data?.length || 0,
  
  // Agrupar pedidos por estado
  estadosPedidos: pedidosPorEstado.data?.reduce((acc: any, pedido: any) => {
    acc[pedido.status] = (acc[pedido.status] || 0) + 1;
    return acc;
  }, {}) || {},
  
  // Productos m√°s vendidos
  topProductos: (() => {
    const productosMap = new Map();
    productosMasVendidos.data?.forEach((pedido: any) => {
      if (pedido.productos) {
        const key = pedido.productos.id;
        const current = productosMap.get(key) || { 
          ...pedido.productos, 
          cantidadVendida: 0, 
          ingresoGenerado: 0 
        };
        current.cantidadVendida += pedido.cantidad || 0;
        current.ingresoGenerado += (pedido.cantidad || 0) * (pedido.productos.price || 0);
        productosMap.set(key, current);
      }
    });
    
    return Array.from(productosMap.values())
      .sort((a, b) => b.cantidadVendida - a.cantidadVendida)
      .slice(0, 5);
  })(),
  
  // Clientes m√°s valiosos
  topClientes: (() => {
    const clientesMap = new Map();
    clientesFrecuentes.data?.forEach((pedido: any) => {
      const email = pedido.cliente_email;
      const current = clientesMap.get(email) || { 
        email, 
        nombre: pedido.cliente_nombre || email,
        totalCompras: 0,
        numeroPedidos: 0
      };
      current.totalCompras += pedido.precio_total || 0;
      current.numeroPedidos += 1;
      clientesMap.set(email, current);
    });
    
    return Array.from(clientesMap.values())
      .sort((a, b) => b.totalCompras - a.totalCompras)
      .slice(0, 5);
  })()
};

function formatPrice(price: number) {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP'
  }).format(price);
}

function calcularCrecimiento(actual: number, anterior: number) {
  if (anterior === 0) return actual > 0 ? 100 : 0;
  return Math.round(((actual - anterior) / anterior) * 100);
}

// Calcular tendencias (comparar con per√≠odo anterior)
const crecimientoSemanal = calcularCrecimiento(reportes.ventasSemana, reportes.ventasMes / 4);
const crecimientoMensual = calcularCrecimiento(reportes.ventasMes, reportes.ventasA√±o / 12);
---

<DashboardLayout title="Reportes y Analytics">
  <div class="space-y-8">
    
    <!-- M√©tricas de Ventas -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
      <StatCard
        title="Ventas Hoy"
        value={formatPrice(reportes.ventasHoy)}
        description={`${reportes.pedidosHoy} pedidos`}
        color="green"
        icon="üí∞"
      />
      
      <StatCard
        title="Ventas Esta Semana"
        value={formatPrice(reportes.ventasSemana)}
        description={`${reportes.pedidosSemana} pedidos | ${crecimientoSemanal >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'} ${Math.abs(crecimientoSemanal)}%`}
        color="blue"
        icon="üìà"
      />
      
      <StatCard
        title="Ventas Este Mes"
        value={formatPrice(reportes.ventasMes)}
        description={`${reportes.pedidosMes} pedidos | ${crecimientoMensual >= 0 ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'} ${Math.abs(crecimientoMensual)}%`}
        color="purple"
        icon="üìä"
      />
      
      <StatCard
        title="Ventas Este A√±o"
        value={formatPrice(reportes.ventasA√±o)}
        description="Total acumulado"
        color="yellow"
        icon="üèÜ"
      />
    </div>

    <!-- Gr√°ficos y Tablas -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      
      <!-- Estados de Pedidos -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">üìä Pedidos por Estado (30 d√≠as)</h2>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {Object.entries(reportes.estadosPedidos).map(([estado, cantidad]: [string, any]) => {
              const total = Object.values(reportes.estadosPedidos).reduce((a: number, b: any) => a + (b as number), 0);
              const porcentaje = Math.round((cantidad / total) * 100);
              
              const colores: any = {
                'pendiente': 'bg-yellow-200',
                'pagado': 'bg-blue-200', 
                'enviado': 'bg-purple-200',
                'entregado': 'bg-green-200',
                'cancelado': 'bg-red-200'
              };
              
              return (
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-3">
                    <div class={`w-4 h-4 rounded ${colores[estado] || 'bg-gray-200'}`}></div>
                    <span class="font-medium capitalize">{estado}</span>
                  </div>
                  <div class="text-right">
                    <div class="font-bold">{cantidad}</div>
                    <div class="text-sm text-gray-500">{porcentaje}%</div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      <!-- Productos M√°s Vendidos -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">üèÜ Top Productos (30 d√≠as)</h2>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {reportes.topProductos.map((producto: any, index: number) => (
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center space-x-3">
                  <div class="text-lg font-bold text-purple-600">#{index + 1}</div>
                  <div>
                    <div class="font-medium">{producto.title}</div>
                    <div class="text-sm text-gray-500">{producto.cantidadVendida} unidades</div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="font-bold">{formatPrice(producto.ingresoGenerado)}</div>
                  <div class="text-sm text-gray-500">Ingresos</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Clientes VIP -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">üëë Top Clientes (30 d√≠as)</h2>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {reportes.topClientes.map((cliente: any, index: number) => (
              <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div class="flex items-center space-x-3">
                  <div class="text-lg font-bold text-green-600">#{index + 1}</div>
                  <div>
                    <div class="font-medium">{cliente.nombre}</div>
                    <div class="text-sm text-gray-500">{cliente.email}</div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="font-bold">{formatPrice(cliente.totalCompras)}</div>
                  <div class="text-sm text-gray-500">{cliente.numeroPedidos} pedidos</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Resumen Ejecutivo -->
      <div class="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg shadow border">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">üìã Resumen Ejecutivo</h2>
        </div>
        <div class="p-6 space-y-4">
          <div class="flex justify-between items-center">
            <span class="font-medium">Ticket Promedio:</span>
            <span class="font-bold text-green-600">
              {formatPrice(reportes.pedidosMes > 0 ? reportes.ventasMes / reportes.pedidosMes : 0)}
            </span>
          </div>
          
          <div class="flex justify-between items-center">
            <span class="font-medium">Pedidos/D√≠a Promedio:</span>
            <span class="font-bold text-blue-600">
              {Math.round(reportes.pedidosMes / 30)} pedidos
            </span>
          </div>
          
          <div class="flex justify-between items-center">
            <span class="font-medium">Tasa de Conversi√≥n:</span>
            <span class="font-bold text-purple-600">
              {Math.round((reportes.estadosPedidos.entregado || 0) / (reportes.pedidosMes || 1) * 100)}%
            </span>
          </div>
          
          <hr class="border-gray-300">
          
          <div class="text-center">
            <div class="text-2xl font-bold text-gray-800 mb-2">
              Meta Mensual: {formatPrice(500000)} {/* Configurar meta */}
            </div>
            <div class="w-full bg-gray-200 rounded-full h-3">
              <div 
                class="bg-gradient-to-r from-green-400 to-green-600 h-3 rounded-full transition-all duration-300"
                style={`width: ${Math.min((reportes.ventasMes / 500000) * 100, 100)}%`}
              ></div>
            </div>
            <div class="text-sm text-gray-600 mt-2">
              {Math.round((reportes.ventasMes / 500000) * 100)}% completado
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Acciones de Reporte -->
    <div class="bg-white rounded-lg shadow p-6">
      <h2 class="text-lg font-semibold text-gray-900 mb-4">üìÑ Exportar Reportes</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <button class="flex items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors">
          <div class="text-center">
            <div class="text-2xl mb-2">üìä</div>
            <div class="font-medium text-gray-700">Reporte de Ventas</div>
            <div class="text-sm text-gray-500">Excel/CSV</div>
          </div>
        </button>
        
        <button class="flex items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-green-500 hover:bg-green-50 transition-colors">
          <div class="text-center">
            <div class="text-2xl mb-2">üì¶</div>
            <div class="font-medium text-gray-700">Reporte de Productos</div>
            <div class="text-sm text-gray-500">PDF</div>
          </div>
        </button>
        
        <button class="flex items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-purple-500 hover:bg-purple-50 transition-colors">
          <div class="text-center">
            <div class="text-2xl mb-2">üë•</div>
            <div class="font-medium text-gray-700">Reporte de Clientes</div>
            <div class="text-sm text-gray-500">Excel/CSV</div>
          </div>
        </button>
      </div>
    </div>

  </div>

  <script is:inline>
    // Funciones para exportar reportes
    function exportarVentas() {
      alert('üöÄ Funcionalidad de exportaci√≥n en desarrollo...');
    }
    
    function exportarProductos() {
      alert('üöÄ Funcionalidad de exportaci√≥n en desarrollo...');
    }
    
    function exportarClientes() {
      alert('üöÄ Funcionalidad de exportaci√≥n en desarrollo...');
    }
  </script>
</DashboardLayout>
