---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { supabase } from '../../lib/supabaseClient';
import { 
  obtenerConfigEstado, 
  obtenerClaseColor, 
  obtenerSiguientesEstados,
  type EstadoPedido 
} from '../../lib/estadosPedidos';

// üì¶ Obtener todos los pedidos con informaci√≥n completa
let pedidos: any[] = [];
let productos: any[] = [];
let error: string | null = null;
let estadisticas = {
  total: 0,
  pendientes: 0,
  confirmados: 0,
  preparando: 0,
  enviados: 0,
  entregados: 0,
  cancelados: 0,
  ingresos: 0
};

try {
  // Obtener pedidos
  const { data: pedidosData, error: pedidosError } = await supabase
    .from('pedidos')
    .select(`
      *,
      productos:producto_id (
        id,
        title,
        sku,
        price,
        images
      )
    `)
    .order('created_at', { ascending: false });

  if (pedidosError) throw pedidosError;
  pedidos = pedidosData || [];

  // Obtener productos para el formulario de nuevo pedido
  const { data: productosData, error: productosError } = await supabase
    .from('productos')
    .select('id, title, price, sku')
    .order('title');

  if (productosError) throw productosError;
  productos = productosData || [];
  
  // Calcular estad√≠sticas
  estadisticas = {
    total: pedidos.length,
    pendientes: pedidos.filter(p => (p.status || p.estado) === 'pendiente').length,
    confirmados: pedidos.filter(p => (p.status || p.estado) === 'confirmado').length,
    preparando: pedidos.filter(p => (p.status || p.estado) === 'preparando').length,
    enviados: pedidos.filter(p => (p.status || p.estado) === 'enviado').length,
    entregados: pedidos.filter(p => (p.status || p.estado) === 'entregado').length,
    cancelados: pedidos.filter(p => (p.status || p.estado) === 'cancelado').length,
    ingresos: pedidos
      .filter(p => !['cancelado', 'pendiente'].includes(p.status || p.estado))
      .reduce((sum, p) => sum + (p.precio_total || p.total || 0), 0)
  };

} catch (e: any) {
  error = e.message || 'Error al cargar los datos';
  console.error('‚ùå Error en pedidos.astro:', e);
}

// Funci√≥n para formatear precio
function formatPrice(price: number) {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP'
  }).format(price);
}

// Funci√≥n para obtener el color del estado usando el sistema unificado
function getStatusColor(status: string) {
  try {
    return obtenerClaseColor(status as EstadoPedido);
  } catch {
    return 'bg-gray-100 text-gray-800';
  }
}

// Funci√≥n para formatear m√©todo de pago
function formatMetodoPago(metodo: string) {
  const metodos: Record<string, string> = {
    'mercadopago': 'üí≥ MercadoPago',
    'whatsapp': 'üì± WhatsApp',
    'efectivo': 'üíµ Efectivo',
    'transferencia': 'üè¶ Transferencia'
  };
  return metodos[metodo] || metodo;
}
---

<DashboardLayout title="Gesti√≥n de Pedidos">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">üì¶ Pedidos</h1>
        <p class="text-gray-600">Administra todos los pedidos (web y WhatsApp)</p>
      </div>
      
      <!-- Bot√≥n para agregar pedido manual -->
      <button 
        onclick="window.toggleNuevoPedido()"
        class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
      >
        <span>‚ûï</span>
        Nuevo Pedido (WhatsApp)
      </button>
    </div>

    <!-- Estad√≠sticas -->
    <div class="grid grid-cols-7 gap-3">
      <div class="bg-blue-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-blue-700">{estadisticas.total}</div>
        <div class="text-xs text-blue-600">Total</div>
      </div>
      <div class="bg-yellow-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-yellow-700">{estadisticas.pendientes}</div>
        <div class="text-xs text-yellow-600">Pendientes</div>
      </div>
      <div class="bg-blue-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-blue-700">{estadisticas.confirmados}</div>
        <div class="text-xs text-blue-600">Confirmados</div>
      </div>
      <div class="bg-orange-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-orange-700">{estadisticas.preparando}</div>
        <div class="text-xs text-orange-600">Preparando</div>
      </div>
      <div class="bg-indigo-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-indigo-700">{estadisticas.enviados}</div>
        <div class="text-xs text-indigo-600">Enviados</div>
      </div>
      <div class="bg-green-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-green-700">{estadisticas.entregados}</div>
        <div class="text-xs text-green-600">Entregados</div>
      </div>
      <div class="bg-purple-50 p-3 rounded-lg text-center">
        <div class="text-lg font-bold text-purple-700">
          {formatPrice(estadisticas.ingresos)}
        </div>
        <div class="text-xs text-purple-600">Ingresos</div>
      </div>
    </div>

    <!-- Error handling -->
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
        <strong>Error:</strong> {error}
      </div>
    )}

    <!-- Formulario para nuevo pedido (inicialmente oculto) -->
        <!-- Formulario para nuevo pedido (inicialmente oculto) -->
    <div id="formNuevoPedido" class="hidden bg-white border-2 border-green-200 rounded-lg p-6">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-semibold text-green-800">‚ûï Crear Nuevo Pedido (WhatsApp)</h3>
        <button 
          type="button" 
          onclick="toggleNuevoPedido()" 
          class="text-gray-500 hover:text-gray-700"
        >
          ‚úñÔ∏è
        </button>
      </div>

      <!-- Secci√≥n de productos (carrito) -->
      <div class="mb-6 p-4 bg-gray-50 rounded-lg">
        <h4 class="text-lg font-semibold text-gray-800 mb-4">üõçÔ∏è Productos del Pedido</h4>
        
        <!-- Lista de productos agregados -->
        <div id="productos-agregados" class="space-y-3 mb-4">
          <!-- Los productos se agregar√°n aqu√≠ din√°micamente -->
        </div>

        <!-- Formulario para agregar producto -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 p-4 bg-white rounded-lg border-2 border-dashed border-gray-300">
          <div>
            <label class="block text-sm font-medium text-gray-700">Producto</label>
            <select 
              id="producto-select"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            >
              <option value="">Seleccionar producto...</option>
              {productos.map((p) => (
                <option value={p.id} data-price={p.price} data-title={p.title}>
                  {p.title} - ${p.price?.toLocaleString()}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Cantidad</label>
            <input 
              id="cantidad-input"
              type="number" 
              min="1" 
              value="1" 
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            >
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Subtotal</label>
            <input 
              id="subtotal-display"
              type="text" 
              readonly 
              placeholder="$0"
              class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm"
            >
          </div>

          <div class="flex items-end">
            <button 
              type="button" 
              id="agregar-producto-btn"
              class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              ‚ûï Agregar
            </button>
          </div>
        </div>

        <!-- Total del pedido -->
        <div class="mt-4 p-3 bg-green-50 rounded-lg">
          <div class="flex justify-between items-center">
            <span class="text-lg font-semibold text-green-800">Total del Pedido:</span>
            <span id="total-pedido" class="text-xl font-bold text-green-900">$0</span>
          </div>
        </div>
      </div>

      <!-- Datos del cliente -->
      <form id="nuevoPedidoForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input type="hidden" id="productos-data" name="productos_data" value="">
        <input type="hidden" id="total-final" name="precio_total" value="0">

        <div>
          <label class="block text-sm font-medium text-gray-700">Nombre del Cliente *</label>
          <input 
            type="text" 
            name="cliente_nombre" 
            required 
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Tel√©fono *</label>
          <input 
            type="tel" 
            name="cliente_telefono" 
            required 
            placeholder="300-123-4567"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Email (opcional)</label>
          <input 
            type="email" 
            name="cliente_email" 
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Total (calculado)</label>
          <input 
            type="text" 
            id="total-readonly"
            readonly 
            placeholder="$0"
            class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm"
          >
        </div>

        <div class="col-span-2">
          <label class="block text-sm font-medium text-gray-700">Direcci√≥n de Env√≠o *</label>
          <textarea 
            name="direccion_envio" 
            required 
            rows="2"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          ></textarea>
        </div>

        <div class="col-span-2">
          <label class="block text-sm font-medium text-gray-700">Notas Adicionales</label>
          <textarea 
            name="notas_admin" 
            rows="2"
            placeholder="Notas internas sobre el pedido..."
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          ></textarea>
        </div>

        <div class="col-span-2 flex gap-4">
          <button 
            type="submit" 
            class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors"
          >
            ‚úÖ Crear Pedido Completo
          </button>
          <button 
            type="button" 
            onclick="toggleNuevoPedido()" 
            class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg transition-colors"
          >
            ‚ùå Cancelar
          </button>
        </div>
      </form>
    </div>

    <!-- Lista de pedidos -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Pedido
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Producto
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Total
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {pedidos.map((pedido) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    #{pedido.numero_seguimiento || 'Sin n√∫mero'}
                  </div>
                  <div class="text-sm text-gray-500">
                    {formatMetodoPago(pedido.metodo_pago || 'N/A')}
                  </div>
                  <div class="text-xs text-gray-400">
                    {new Date(pedido.created_at).toLocaleDateString('es-CO')}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    {pedido.cliente_nombre}
                  </div>
                  <div class="text-sm text-gray-500">
                    {pedido.cliente_telefono}
                  </div>
                  {pedido.cliente_email && (
                    <div class="text-sm text-gray-500">
                      {pedido.cliente_email}
                    </div>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    {pedido.productos?.title || 'Producto eliminado'}
                  </div>
                  <div class="text-sm text-gray-500">
                    Cantidad: {pedido.cantidad}
                  </div>
                  <div class="text-sm text-gray-500">
                    SKU: {pedido.productos?.sku || 'N/A'}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(pedido.status || pedido.estado)}`}>
                    {pedido.status || pedido.estado}
                  </span>
                  {pedido.numero_guia && (
                    <div class="text-xs text-gray-500 mt-1">
                      Gu√≠a: {pedido.numero_guia}
                    </div>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {formatPrice(pedido.precio_total || pedido.total || 0)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex gap-2">
                    <button 
                      onclick={`window.actualizarEstado('${pedido.id}', '${pedido.status || pedido.estado}')`}
                      class="text-blue-600 hover:text-blue-900 text-xs"
                    >
                      ‚úèÔ∏è Estado
                    </button>
                    <button 
                      onclick={`window.eliminarPedido('${pedido.id}')`}
                      class="text-red-600 hover:text-red-900 text-xs"
                    >
                      üóëÔ∏è Eliminar
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    {pedidos.length === 0 && !error && (
      <div class="text-center py-12">
        <div class="text-gray-500 text-lg">üì¶ No hay pedidos a√∫n</div>
        <p class="text-gray-400 mt-2">Los pedidos aparecer√°n aqu√≠ cuando se realicen</p>
        <div class="mt-4">
          <button 
            onclick="toggleNuevoPedido()"
            class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg"
          >
            ‚ûï Crear Primer Pedido
          </button>
        </div>
      </div>
    )}
  </div>

  <script>
    // üåç DECLARAR TIPOS PARA WINDOW
    declare global {
      interface Window {
        toggleNuevoPedido: () => void;
        calcularTotal: () => void;
        actualizarEstado: (id: string, estadoActual: string) => void;
        eliminarPedido: (id: string) => Promise<void>;
      }
    }

    // üåç FUNCIONES GLOBALES (asignadas a window para acceso desde onclick)
    
    // Array para almacenar los productos del pedido
    let productosDelPedido: Array<{
      id: string;
      title: string;
      precio: number;
      cantidad: number;
      subtotal: number;
    }> = [];

    // Mostrar/ocultar formulario de nuevo pedido
    (window as any).toggleNuevoPedido = () => {
      const form = document.getElementById('formNuevoPedido');
      if (form) {
        const isHidden = form.classList.contains('hidden');
        if (isHidden) {
          form.classList.remove('hidden');
          // Limpiar productos al abrir
          productosDelPedido = [];
          actualizarVistaProductos();
          actualizarTotal();
        } else {
          form.classList.add('hidden');
          // Limpiar formulario al cerrar
          const formulario = document.getElementById('nuevoPedidoForm') as HTMLFormElement;
          if (formulario) formulario.reset();
          productosDelPedido = [];
        }
      }
    };

    // Funci√≥n para calcular subtotal del producto seleccionado
    (window as any).calcularSubtotal = () => {
      const productoSelect = document.getElementById('producto-select') as HTMLSelectElement;
      const cantidadInput = document.getElementById('cantidad-input') as HTMLInputElement;
      const subtotalDisplay = document.getElementById('subtotal-display') as HTMLInputElement;
      
      if (productoSelect && cantidadInput && subtotalDisplay) {
        const selectedOption = productoSelect.options[productoSelect.selectedIndex];
        const precio = parseFloat(selectedOption.dataset.price || '0') || 0;
        const cantidad = parseInt(cantidadInput.value) || 0;
        const subtotal = precio * cantidad;
        
        subtotalDisplay.value = subtotal > 0 ? `$${subtotal.toLocaleString()}` : '$0';
      }
    };

    // Funci√≥n para agregar producto al pedido
    (window as any).agregarProducto = () => {
      const productoSelect = document.getElementById('producto-select') as HTMLSelectElement;
      const cantidadInput = document.getElementById('cantidad-input') as HTMLInputElement;
      
      if (!productoSelect.value) {
        alert('‚ùå Por favor selecciona un producto');
        return;
      }
      
      const cantidad = parseInt(cantidadInput.value) || 0;
      if (cantidad <= 0) {
        alert('‚ùå La cantidad debe ser mayor a 0');
        return;
      }

      const selectedOption = productoSelect.options[productoSelect.selectedIndex];
      const productoId = selectedOption.value;
      const titulo = selectedOption.dataset.title || selectedOption.text;
      const precio = parseFloat(selectedOption.dataset.price || '0') || 0;
      const subtotal = precio * cantidad;

      // Verificar si el producto ya est√° en el pedido
      const productoExistente = productosDelPedido.find(p => p.id === productoId);
      
      if (productoExistente) {
        // Si existe, actualizar cantidad
        productoExistente.cantidad += cantidad;
        productoExistente.subtotal = productoExistente.precio * productoExistente.cantidad;
      } else {
        // Si no existe, agregar nuevo
        productosDelPedido.push({
          id: productoId,
          title: titulo,
          precio: precio,
          cantidad: cantidad,
          subtotal: subtotal
        });
      }

      // Limpiar selecci√≥n
      productoSelect.value = '';
      cantidadInput.value = '1';
      (document.getElementById('subtotal-display') as HTMLInputElement).value = '$0';

      // Actualizar vista
      actualizarVistaProductos();
      actualizarTotal();
      
      console.log('‚úÖ Producto agregado:', productosDelPedido);
    };

    // Funci√≥n para eliminar producto del pedido
    (window as any).eliminarProducto = (index: number) => {
      if (confirm('¬øEliminar este producto del pedido?')) {
        productosDelPedido.splice(index, 1);
        actualizarVistaProductos();
        actualizarTotal();
      }
    };

    // Funci√≥n para actualizar la vista de productos agregados
    function actualizarVistaProductos() {
      const container = document.getElementById('productos-agregados');
      if (!container) return;

      if (productosDelPedido.length === 0) {
        container.innerHTML = '<div class="text-gray-500 text-center py-4">No hay productos agregados</div>';
        return;
      }

      container.innerHTML = productosDelPedido.map((producto, index) => `
        <div class="flex items-center justify-between p-3 bg-white rounded-lg border border-gray-200" data-product-index="${index}">
          <div class="flex-1">
            <h5 class="font-medium text-gray-900">${producto.title}</h5>
            <p class="text-sm text-gray-600">
              $${producto.precio.toLocaleString()} x ${producto.cantidad} = 
              <span class="font-semibold">$${producto.subtotal.toLocaleString()}</span>
            </p>
          </div>
          <button 
            class="eliminar-producto-btn text-red-600 hover:text-red-800 ml-4"
            title="Eliminar producto"
            data-index="${index}"
          >
            üóëÔ∏è
          </button>
        </div>
      `).join('');

      // Agregar event listeners a los botones de eliminar
      const eliminarBtns = container.querySelectorAll('.eliminar-producto-btn');
      eliminarBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const index = parseInt((e.target as HTMLElement).getAttribute('data-index') || '0');
          (window as any).eliminarProducto(index);
        });
      });
    }

    // Funci√≥n para actualizar el total del pedido
    function actualizarTotal() {
      const total = productosDelPedido.reduce((sum, producto) => sum + producto.subtotal, 0);
      
      const totalPedidoElement = document.getElementById('total-pedido');
      const totalReadonlyElement = document.getElementById('total-readonly') as HTMLInputElement;
      const totalFinalElement = document.getElementById('total-final') as HTMLInputElement;
      const productosDataElement = document.getElementById('productos-data') as HTMLInputElement;
      
      if (totalPedidoElement) {
        totalPedidoElement.textContent = `$${total.toLocaleString()}`;
      }
      
      if (totalReadonlyElement) {
        totalReadonlyElement.value = `$${total.toLocaleString()}`;
      }
      
      if (totalFinalElement) {
        totalFinalElement.value = total.toString();
      }
      
      if (productosDataElement) {
        productosDataElement.value = JSON.stringify(productosDelPedido);
      }
    }    // Funci√≥n para actualizar estado usando el sistema unificado
    window.actualizarEstado = async function(id: string, estadoActual: string) {
      console.log('üîÑ Actualizando estado para:', id);
      
      try {
        // Obtener estados siguientes permitidos
        const response = await fetch('/api/pedidos/get-next-states', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ pedidoId: id })
        });
        
        if (!response.ok) {
          // Fallback a lista est√°tica si la API falla
          const estadosPermitidos = ['pendiente', 'confirmado', 'preparando', 'enviado', 'entregado', 'cancelado', 'devuelto'];
          mostrarSelectorEstado(id, estadoActual, estadosPermitidos);
          return;
        }
        
        const data = await response.json();
        mostrarSelectorEstado(id, estadoActual, data.siguientesEstados || []);
        
      } catch (error) {
        console.error('Error obteniendo estados:', error);
        // Fallback
        const estadosPermitidos = ['pendiente', 'confirmado', 'preparando', 'enviado', 'entregado', 'cancelado', 'devuelto'];
        mostrarSelectorEstado(id, estadoActual, estadosPermitidos);
      }
    };

    // Funci√≥n auxiliar para mostrar el selector de estado
    function mostrarSelectorEstado(id: string, estadoActual: string, estadosPermitidos: string[]) {
      let mensaje = `Estado actual: ${estadoActual}\n\nSelecciona nuevo estado:\n`;
      estadosPermitidos.forEach((estado, index) => {
        mensaje += `${index + 1}. ${estado}\n`;
      });
      mensaje += '\nEscribe el n√∫mero:';
      
      const estadoSeleccionado = prompt(mensaje);
      
      if (estadoSeleccionado && 
          parseInt(estadoSeleccionado) >= 1 && 
          parseInt(estadoSeleccionado) <= estadosPermitidos.length) {
        
        const nuevoEstado = estadosPermitidos[parseInt(estadoSeleccionado) - 1];
        
        console.log('üöÄ Enviando actualizaci√≥n:', { id, status: nuevoEstado });
        
        fetch('/api/pedidos/update-status-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, status: nuevoEstado })
        })
        .then(response => response.json())
        .then(result => {
          console.log('üìÑ Resultado actualizaci√≥n:', result);
          if (result.success) {
            alert(`‚úÖ Estado actualizado a: ${nuevoEstado}`);
            location.reload();
          } else {
            alert(`‚ùå Error: ${result.error}`);
          }
        })
        .catch(error => {
          console.error('‚ùå Error:', error);
          alert('‚ùå Error de conexi√≥n');
        });
      }
    };

    // Funci√≥n para eliminar pedido
    window.eliminarPedido = async function(id: string) {
      console.log('üóëÔ∏è Eliminando pedido:', id);
      if (!confirm('¬øEst√°s seguro de eliminar este pedido?')) return;

      try {
        const response = await fetch('/api/pedidos/delete', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        const result = await response.json();
        console.log('üìÑ Resultado eliminaci√≥n:', result);

        if (response.ok) {
          alert('‚úÖ Pedido eliminado');
          location.reload();
        } else {
          alert(`‚ùå Error: ${result.error}`);
        }
      } catch (error) {
        console.error('‚ùå Error:', error);
        alert('‚ùå Error de conexi√≥n');
      }
    };

    // üöÄ Event listeners cuando el DOM est√© listo
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üöÄ DOM cargado, inicializando eventos...');

      // Agregar event listeners para c√°lculo de subtotal
      const productoSelect = document.getElementById('producto-select') as HTMLSelectElement;
      const cantidadInput = document.getElementById('cantidad-input') as HTMLInputElement;
      const agregarBtn = document.getElementById('agregar-producto-btn') as HTMLButtonElement;

      if (productoSelect) {
        productoSelect.addEventListener('change', (window as any).calcularSubtotal);
      }

      if (cantidadInput) {
        cantidadInput.addEventListener('input', (window as any).calcularSubtotal);
      }

      if (agregarBtn) {
        agregarBtn.addEventListener('click', (window as any).agregarProducto);
      }

      // Manejar env√≠o del formulario
      const form = document.getElementById('nuevoPedidoForm') as HTMLFormElement;
      if (form) {
        console.log('‚úÖ Formulario encontrado, agregando event listener');
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          console.log('üìù Formulario enviado');
          
          // Validar que hay productos agregados
          if (productosDelPedido.length === 0) {
            alert('‚ùå Debes agregar al menos un producto al pedido');
            return;
          }

          const formData = new FormData(e.target as HTMLFormElement);
          const data = Object.fromEntries(formData.entries());
          
          console.log('üìã Datos del formulario:', data);
          console.log('üõçÔ∏è Productos del pedido:', productosDelPedido);
          
          // Validar datos b√°sicos
          if (!data.cliente_nombre || !data.cliente_telefono || !data.direccion_envio) {
            alert('‚ùå Por favor completa todos los campos obligatorios');
            return;
          }

          // Calcular total real
          const totalCalculado = productosDelPedido.reduce((sum, producto) => sum + producto.subtotal, 0);

          const payload = {
            productos_data: productosDelPedido,
            cliente_nombre: data.cliente_nombre,
            cliente_telefono: data.cliente_telefono,
            cliente_email: data.cliente_email || null,
            direccion_envio: data.direccion_envio,
            precio_total: totalCalculado,
            notas_admin: data.notas_admin || null,
            metodo_pago: 'whatsapp',
            status: 'pendiente'
          };
          
          console.log('üöÄ Enviando payload:', payload);

          try {
            const response = await fetch('/api/pedidos/create-manual', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            console.log('üì° Respuesta recibida:', response.status);
            const result = await response.json();
            console.log('üìÑ Resultado:', result);

            if (response.ok) {
              const mensaje = productosDelPedido.length === 1 
                ? `‚úÖ Pedido creado exitosamente!\nN√∫mero de seguimiento: ${result.numero_seguimiento_principal}` 
                : `‚úÖ ${result.total_pedidos} pedidos relacionados creados exitosamente!\nN√∫mero de seguimiento principal: ${result.numero_seguimiento_principal}\nProductos: ${result.productos_resumen}`;
              
              alert(mensaje);
              location.reload();
            } else {
              alert(`‚ùå Error: ${result.error}`);
              console.error('‚ùå Error del servidor:', result);
            }
          } catch (error) {
            console.error('‚ùå Error de conexi√≥n:', error);
            alert('‚ùå Error de conexi√≥n');
          }
        });
      } else {
        console.error('‚ùå No se encontr√≥ el formulario nuevoPedidoForm');
      }
    });
  </script>
</DashboardLayout>
