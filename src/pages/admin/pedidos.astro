---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { supabase } from '../../lib/supabaseClient';

// üì¶ Obtener todos los pedidos con informaci√≥n completa
let pedidos: any[] = [];
let productos: any[] = [];
let error: string | null = null;
let estadisticas = {
  total: 0,
  pendientes: 0,
  confirmados: 0,
  preparando: 0,
  enviados: 0,
  entregados: 0,
  cancelados: 0,
  ingresos: 0
};

try {
  // Obtener pedidos
  const { data: pedidosData, error: pedidosError } = await supabase
    .from('pedidos')
    .select(`
      *,
      productos:producto_id (
        id,
        title,
        sku,
        price,
        images
      )
    `)
    .order('created_at', { ascending: false });

  if (pedidosError) throw pedidosError;
  pedidos = pedidosData || [];

  // Obtener productos para el formulario de nuevo pedido
  const { data: productosData, error: productosError } = await supabase
    .from('productos')
    .select('id, title, price, sku')
    .order('title');

  if (productosError) throw productosError;
  productos = productosData || [];
  
  // Calcular estad√≠sticas
  estadisticas = {
    total: pedidos.length,
    pendientes: pedidos.filter(p => (p.status || p.estado) === 'pendiente').length,
    confirmados: pedidos.filter(p => (p.status || p.estado) === 'confirmado').length,
    preparando: pedidos.filter(p => (p.status || p.estado) === 'preparando').length,
    enviados: pedidos.filter(p => (p.status || p.estado) === 'enviado').length,
    entregados: pedidos.filter(p => (p.status || p.estado) === 'entregado').length,
    cancelados: pedidos.filter(p => (p.status || p.estado) === 'cancelado').length,
    ingresos: pedidos
      .filter(p => !['cancelado', 'pendiente'].includes(p.status || p.estado))
      .reduce((sum, p) => sum + (p.precio_total || p.total || 0), 0)
  };

} catch (e: any) {
  error = e.message || 'Error al cargar los datos';
  console.error('‚ùå Error en pedidos.astro:', e);
}

// Funci√≥n para formatear precio
function formatPrice(price: number) {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP'
  }).format(price);
}

// Funci√≥n para obtener el color del estado
function getStatusColor(status: string) {
  const colors: Record<string, string> = {
    'pendiente': 'bg-yellow-100 text-yellow-800',
    'confirmado': 'bg-blue-100 text-blue-800',
    'preparando': 'bg-orange-100 text-orange-800',
    'enviado': 'bg-indigo-100 text-indigo-800',
    'entregado': 'bg-green-100 text-green-800',
    'cancelado': 'bg-red-100 text-red-800'
  };
  return colors[status] || 'bg-gray-100 text-gray-800';
}

// Funci√≥n para formatear m√©todo de pago
function formatMetodoPago(metodo: string) {
  const metodos: Record<string, string> = {
    'mercadopago': 'üí≥ MercadoPago',
    'whatsapp': 'üì± WhatsApp',
    'efectivo': 'üíµ Efectivo',
    'transferencia': 'üè¶ Transferencia'
  };
  return metodos[metodo] || metodo;
}
---

<DashboardLayout title="Gesti√≥n de Pedidos">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">üì¶ Pedidos</h1>
        <p class="text-gray-600">Administra todos los pedidos (web y WhatsApp)</p>
      </div>
      
      <!-- Bot√≥n para agregar pedido manual -->
      <button 
        onclick="window.toggleNuevoPedido()"
        class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
      >
        <span>‚ûï</span>
        Nuevo Pedido (WhatsApp)
      </button>
    </div>

    <!-- Estad√≠sticas -->
    <div class="grid grid-cols-7 gap-3">
      <div class="bg-blue-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-blue-700">{estadisticas.total}</div>
        <div class="text-xs text-blue-600">Total</div>
      </div>
      <div class="bg-yellow-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-yellow-700">{estadisticas.pendientes}</div>
        <div class="text-xs text-yellow-600">Pendientes</div>
      </div>
      <div class="bg-blue-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-blue-700">{estadisticas.confirmados}</div>
        <div class="text-xs text-blue-600">Confirmados</div>
      </div>
      <div class="bg-orange-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-orange-700">{estadisticas.preparando}</div>
        <div class="text-xs text-orange-600">Preparando</div>
      </div>
      <div class="bg-indigo-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-indigo-700">{estadisticas.enviados}</div>
        <div class="text-xs text-indigo-600">Enviados</div>
      </div>
      <div class="bg-green-50 p-3 rounded-lg text-center">
        <div class="text-xl font-bold text-green-700">{estadisticas.entregados}</div>
        <div class="text-xs text-green-600">Entregados</div>
      </div>
      <div class="bg-purple-50 p-3 rounded-lg text-center">
        <div class="text-lg font-bold text-purple-700">
          {formatPrice(estadisticas.ingresos)}
        </div>
        <div class="text-xs text-purple-600">Ingresos</div>
      </div>
    </div>

    <!-- Error handling -->
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
        <strong>Error:</strong> {error}
      </div>
    )}

    <!-- Formulario para nuevo pedido (inicialmente oculto) -->
    <div id="formNuevoPedido" class="hidden bg-white border-2 border-green-200 rounded-lg p-6">
      <h2 class="text-lg font-semibold mb-4 text-green-800">üì± Nuevo Pedido de WhatsApp</h2>
      
      <form id="nuevoPedidoForm" class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Producto</label>
          <select name="producto_id" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500">
            <option value="">Seleccionar producto...</option>
            {productos.map(producto => (
              <option value={producto.id} data-price={producto.price}>
                {producto.title} - {formatPrice(producto.price)} ({producto.sku})
              </option>
            ))}
          </select>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Cantidad</label>
          <input 
            type="number" 
            name="cantidad" 
            min="1" 
            value="1" 
            required 
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            oninput="window.calcularTotal()"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Nombre del Cliente</label>
          <input 
            type="text" 
            name="cliente_nombre" 
            required 
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Tel√©fono</label>
          <input 
            type="tel" 
            name="cliente_telefono" 
            required 
            placeholder="300-123-4567"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Email (opcional)</label>
          <input 
            type="email" 
            name="cliente_email" 
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Total</label>
          <input 
            type="number" 
            name="precio_total" 
            readonly 
            class="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 shadow-sm"
          >
        </div>

        <div class="col-span-2">
          <label class="block text-sm font-medium text-gray-700">Direcci√≥n de Env√≠o</label>
          <textarea 
            name="direccion_envio" 
            required 
            rows="2"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          ></textarea>
        </div>

        <div class="col-span-2">
          <label class="block text-sm font-medium text-gray-700">Notas Adicionales</label>
          <textarea 
            name="notas_admin" 
            rows="2"
            placeholder="Notas internas sobre el pedido..."
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          ></textarea>
        </div>

        <div class="col-span-2 flex gap-4">
          <button 
            type="submit" 
            class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors"
          >
            ‚úÖ Crear Pedido
          </button>
          <button 
            type="button" 
            onclick="toggleNuevoPedido()" 
            class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg transition-colors"
          >
            ‚ùå Cancelar
          </button>
        </div>
      </form>
    </div>

    <!-- Lista de pedidos -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Pedido
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cliente
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Producto
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Total
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {pedidos.map((pedido) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    #{pedido.numero_seguimiento || 'Sin n√∫mero'}
                  </div>
                  <div class="text-sm text-gray-500">
                    {formatMetodoPago(pedido.metodo_pago || 'N/A')}
                  </div>
                  <div class="text-xs text-gray-400">
                    {new Date(pedido.created_at).toLocaleDateString('es-CO')}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    {pedido.cliente_nombre}
                  </div>
                  <div class="text-sm text-gray-500">
                    {pedido.cliente_telefono}
                  </div>
                  {pedido.cliente_email && (
                    <div class="text-sm text-gray-500">
                      {pedido.cliente_email}
                    </div>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">
                    {pedido.productos?.title || 'Producto eliminado'}
                  </div>
                  <div class="text-sm text-gray-500">
                    Cantidad: {pedido.cantidad}
                  </div>
                  <div class="text-sm text-gray-500">
                    SKU: {pedido.productos?.sku || 'N/A'}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(pedido.status || pedido.estado)}`}>
                    {pedido.status || pedido.estado}
                  </span>
                  {pedido.numero_guia && (
                    <div class="text-xs text-gray-500 mt-1">
                      Gu√≠a: {pedido.numero_guia}
                    </div>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {formatPrice(pedido.precio_total || pedido.total || 0)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div class="flex gap-2">
                    <button 
                      onclick={`window.actualizarEstado('${pedido.id}', '${pedido.status || pedido.estado}')`}
                      class="text-blue-600 hover:text-blue-900 text-xs"
                    >
                      ‚úèÔ∏è Estado
                    </button>
                    <button 
                      onclick={`window.eliminarPedido('${pedido.id}')`}
                      class="text-red-600 hover:text-red-900 text-xs"
                    >
                      üóëÔ∏è Eliminar
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    {pedidos.length === 0 && !error && (
      <div class="text-center py-12">
        <div class="text-gray-500 text-lg">üì¶ No hay pedidos a√∫n</div>
        <p class="text-gray-400 mt-2">Los pedidos aparecer√°n aqu√≠ cuando se realicen</p>
        <div class="mt-4">
          <button 
            onclick="toggleNuevoPedido()"
            class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg"
          >
            ‚ûï Crear Primer Pedido
          </button>
        </div>
      </div>
    )}
  </div>

  <script>
    // üåç FUNCIONES GLOBALES (asignadas a window para acceso desde onclick)
    
    // Mostrar/ocultar formulario de nuevo pedido
    window.toggleNuevoPedido = function() {
      console.log('üîÑ Ejecutando toggleNuevoPedido');
      const form = document.getElementById('formNuevoPedido');
      if (form) {
        form.classList.toggle('hidden');
        
        if (!form.classList.contains('hidden')) {
          // Resetear formulario cuando se abre
          const formElement = document.getElementById('nuevoPedidoForm');
          if (formElement) {
            formElement.reset();
          }
        }
      } else {
        console.error('‚ùå No se encontr√≥ formNuevoPedido');
      }
    };

    // Calcular total autom√°ticamente
    window.calcularTotal = function() {
      console.log('üßÆ Calculando total');
      const productoSelect = document.querySelector('select[name="producto_id"]');
      const cantidadInput = document.querySelector('input[name="cantidad"]');
      const totalInput = document.querySelector('input[name="precio_total"]');
      
      if (productoSelect && cantidadInput && totalInput) {
        const selectedOption = productoSelect.options[productoSelect.selectedIndex];
        const precio = parseFloat(selectedOption.dataset.price || '0') || 0;
        const cantidad = parseInt(cantidadInput.value) || 0;
        
        totalInput.value = (precio * cantidad).toString();
        console.log('üí∞ Total calculado:', precio * cantidad);
      }
    };

    // Funci√≥n para actualizar estado
    window.actualizarEstado = function(id, estadoActual) {
      console.log('üîÑ Actualizando estado para:', id);
      const nuevosEstados = ['pendiente', 'confirmado', 'preparando', 'enviado', 'entregado', 'cancelado'];
      const estadoSeleccionado = prompt(`Estado actual: ${estadoActual}\n\nSelecciona nuevo estado:\n1. pendiente\n2. confirmado\n3. preparando\n4. enviado\n5. entregado\n6. cancelado\n\nEscribe el n√∫mero:`);
      
      if (estadoSeleccionado && estadoSeleccionado >= '1' && estadoSeleccionado <= '6') {
        const nuevoEstado = nuevosEstados[parseInt(estadoSeleccionado) - 1];
        
        console.log('üöÄ Enviando actualizaci√≥n:', { id, status: nuevoEstado });
        
        fetch('/api/pedidos/update-status-simple', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id, status: nuevoEstado })
        })
        .then(response => response.json())
        .then(result => {
          console.log('üìÑ Resultado actualizaci√≥n:', result);
          if (result.success) {
            alert(`‚úÖ Estado actualizado a: ${nuevoEstado}`);
            location.reload();
          } else {
            alert(`‚ùå Error: ${result.error}`);
          }
        })
        .catch(error => {
          console.error('‚ùå Error:', error);
          alert('‚ùå Error de conexi√≥n');
        });
      }
    };

    // Funci√≥n para eliminar pedido
    window.eliminarPedido = async function(id) {
      console.log('üóëÔ∏è Eliminando pedido:', id);
      if (!confirm('¬øEst√°s seguro de eliminar este pedido?')) return;

      try {
        const response = await fetch('/api/pedidos/delete', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id })
        });

        const result = await response.json();
        console.log('üìÑ Resultado eliminaci√≥n:', result);

        if (response.ok) {
          alert('‚úÖ Pedido eliminado');
          location.reload();
        } else {
          alert(`‚ùå Error: ${result.error}`);
        }
      } catch (error) {
        console.error('‚ùå Error:', error);
        alert('‚ùå Error de conexi√≥n');
      }
    };

    // üöÄ Event listeners cuando el DOM est√© listo
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üöÄ DOM cargado, inicializando eventos...');
      
      // Event listener para cambio de producto
      const productoSelect = document.querySelector('select[name="producto_id"]');
      if (productoSelect) {
        productoSelect.addEventListener('change', window.calcularTotal);
        console.log('‚úÖ Event listener agregado al select de productos');
      } else {
        console.error('‚ùå No se encontr√≥ el select de productos');
      }

      // Manejar env√≠o del formulario
      const form = document.getElementById('nuevoPedidoForm');
      if (form) {
        console.log('‚úÖ Formulario encontrado, agregando event listener');
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          console.log('üìù Formulario enviado');
          
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData.entries());
          
          console.log('üìã Datos del formulario:', data);
          
          // Validar datos
          if (!data.producto_id || !data.cliente_nombre || !data.cliente_telefono) {
            alert('Por favor completa todos los campos obligatorios');
            return;
          }

          const payload = {
            ...data,
            metodo_pago: 'whatsapp',
            status: 'pendiente'
          };
          
          console.log('üöÄ Enviando payload:', payload);

          try {
            const response = await fetch('/api/pedidos/create-manual', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
            });

            console.log('üì° Respuesta recibida:', response.status);
            const result = await response.json();
            console.log('üìÑ Resultado:', result);

            if (response.ok) {
              alert(`‚úÖ Pedido creado exitosamente!\nN√∫mero de seguimiento: ${result.numero_seguimiento}`);
              location.reload();
            } else {
              alert(`‚ùå Error: ${result.error}`);
              console.error('‚ùå Error del servidor:', result);
            }
          } catch (error) {
            console.error('‚ùå Error de conexi√≥n:', error);
            alert('‚ùå Error de conexi√≥n');
          }
        });
      } else {
        console.error('‚ùå No se encontr√≥ el formulario nuevoPedidoForm');
      }
    });
  </script>
</DashboardLayout>
