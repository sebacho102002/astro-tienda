---
export const prerender = false;

import DashboardLayout from "../../layouts/DashboardLayout.astro";
import { supabase } from '../../lib/supabaseClient';

// El middleware ya verifica que solo super_admin y manager pueden acceder
const currentUser = (Astro.locals as any).user;

let usuarios: any[] = [];
let error = '';
let success = '';

// Manejar acciones POST (crear, editar, eliminar usuarios)
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action') as string;

    if (action === 'create') {
      const email = formData.get('email') as string;
      const name = formData.get('name') as string;
      const role = formData.get('role') as string;
      const password = formData.get('password') as string;

      if (!email || !name || !role || !password) {
        error = 'Todos los campos son obligatorios';
      } else {
        // Si es manager, no puede crear super_admins
        if (currentUser?.role === 'manager' && role === 'super_admin') {
          error = 'Los managers no pueden crear super admins';
        } else {
          // Verificar que el email no exista
          const { data: existingUser } = await supabase
            .from('admin_users')
            .select('id')
            .eq('email', email)
            .single();

          if (existingUser) {
            error = 'Ya existe un usuario con ese email';
          } else {
            // Crear usuario usando nuestra función
            const { createUser } = await import('../../lib/auth');
            await createUser(email, name, password, role);
            success = 'Usuario creado exitosamente';
          }
        }
      }
    } else if (action === 'edit') {
      const userId = formData.get('userId') as string;
      const email = formData.get('email') as string;
      const name = formData.get('name') as string;
      const role = formData.get('role') as string;

      if (!userId || !email || !name || !role) {
        error = 'Todos los campos son obligatorios';
      } else {
        // Si es manager, verificar permisos adicionales
        if (currentUser?.role === 'manager') {
          // No puede crear super_admins
          if (role === 'super_admin') {
            error = 'Los managers no pueden asignar el rol de super admin';
          }
          
          // No puede editar super_admins
          const { data: targetUser } = await supabase
            .from('admin_users')
            .select('role')
            .eq('id', userId)
            .single();
            
          if (targetUser?.role === 'super_admin') {
            error = 'Los managers no pueden editar super admins';
          }
        }
        
        if (!error) {
          // Verificar que el email no esté en uso por otro usuario
          const { data: existingUser } = await supabase
            .from('admin_users')
            .select('id')
            .eq('email', email)
            .neq('id', userId)
            .single();

          if (existingUser) {
            error = 'Ya existe otro usuario con ese email';
          } else {
            const { error: updateError } = await supabase
              .from('admin_users')
              .update({ 
                email: email,
                name: name,
                role: role
              })
              .eq('id', userId);

            if (updateError) {
              error = 'Error actualizando usuario: ' + updateError.message;
            } else {
              success = 'Usuario actualizado exitosamente';
            }
          }
        }
      }
    } else if (action === 'delete') {
      const userId = formData.get('userId') as string;
      
      if (userId) {
        // No permitir eliminar el propio usuario
        if (userId === currentUser?.id) {
          error = 'No puedes eliminar tu propio usuario';
        } else {
          // Si es manager, no puede eliminar super_admins
          if (currentUser?.role === 'manager') {
            const { data: targetUser } = await supabase
              .from('admin_users')
              .select('role')
              .eq('id', userId)
              .single();
              
            if (targetUser?.role === 'super_admin') {
              error = 'Los managers no pueden eliminar super admins';
            } else {
              // Proceder con la eliminación
              await supabase.from('admin_sessions').delete().eq('user_id', userId);
              await supabase.from('admin_audit_log').delete().eq('user_id', userId);
              
              const { error: deleteError } = await supabase
                .from('admin_users')
                .delete()
                .eq('id', userId);

              if (deleteError) {
                error = 'Error eliminando usuario: ' + deleteError.message;
              } else {
                success = 'Usuario eliminado exitosamente';
              }
            }
          } else {
            // Super admin puede eliminar cualquiera
            await supabase.from('admin_sessions').delete().eq('user_id', userId);
            await supabase.from('admin_audit_log').delete().eq('user_id', userId);
            
            const { error: deleteError } = await supabase
              .from('admin_users')
              .delete()
              .eq('id', userId);

            if (deleteError) {
              error = 'Error eliminando usuario: ' + deleteError.message;
            } else {
              success = 'Usuario eliminado exitosamente';
            }
          }
        }
      }
    } else if (action === 'toggle_status') {
      const userId = formData.get('userId') as string;
      const newStatus = formData.get('newStatus') as string;
      
      if (userId && newStatus) {
        const currentUser = (Astro.locals as any).user;
        if (userId === currentUser?.id) {
          error = 'No puedes desactivar tu propio usuario';
        } else {
          const { error: updateError } = await supabase
            .from('admin_users')
            .update({ status: newStatus })
            .eq('id', userId);

          if (updateError) {
            error = 'Error actualizando estado: ' + updateError.message;
          } else {
            success = `Usuario ${newStatus === 'active' ? 'activado' : 'desactivado'} exitosamente`;
          }
        }
      }
    } else if (action === 'reset_password') {
      const userId = formData.get('userId') as string;
      const newPassword = formData.get('newPassword') as string;
      
      if (userId && newPassword) {
        const { hashPassword } = await import('../../lib/auth');
        const hashedPassword = await hashPassword(newPassword);
        
        const { error: updateError } = await supabase
          .from('admin_users')
          .update({ 
            password_hash: hashedPassword,
            login_attempts: 0,
            locked_until: null
          })
          .eq('id', userId);

        if (updateError) {
          error = 'Error actualizando contraseña: ' + updateError.message;
        } else {
          success = 'Contraseña actualizada exitosamente';
        }
      }
    }
  } catch (e) {
    console.error('Error en acción de usuario:', e);
    error = 'Error procesando la acción';
  }
}

// Obtener usuarios de la base de datos
try {
  const { data, error: fetchError } = await supabase
    .from('admin_users')
    .select(`
      id, 
      email, 
      name, 
      role, 
      status, 
      last_login, 
      created_at, 
      login_attempts, 
      locked_until
    `)
    .order('created_at', { ascending: false });

  if (fetchError) {
    console.error('Error obteniendo usuarios:', fetchError);
    error = 'Error cargando usuarios';
  } else {
    usuarios = data || [];
  }
} catch (e) {
  console.error('Error conectando a la base de datos:', e);
  error = 'Error de conexión';
}

// Calcular estadísticas
const stats = {
  totalUsuarios: usuarios.length,
  usuariosActivos: usuarios.filter(u => u.status === 'active').length,
  superAdmins: usuarios.filter(u => u.role === 'super_admin').length,
  managers: usuarios.filter(u => u.role === 'manager').length,
  editors: usuarios.filter(u => u.role === 'editor').length,
  viewers: usuarios.filter(u => u.role === 'viewer').length,
};

// Función helper para formatear fechas
function formatDate(dateString: string | null) {
  if (!dateString) return 'Nunca';
  try {
    return new Date(dateString).toLocaleString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return 'Fecha inválida';
  }
}

// Función helper para obtener info del rol
function getRoleInfo(role: string) {
  const roles: Record<string, { color: string; text: string }> = {
    super_admin: { color: 'bg-purple-100 text-purple-800', text: 'Super Admin' },
    manager: { color: 'bg-blue-100 text-blue-800', text: 'Manager' },
    editor: { color: 'bg-green-100 text-green-800', text: 'Editor' },
    viewer: { color: 'bg-gray-100 text-gray-800', text: 'Visualizador' }
  };
  return roles[role] || { color: 'bg-gray-100 text-gray-800', text: role };
}

// Función helper para obtener info del estado
function getStatusInfo(status: string) {
  return status === 'active' 
    ? { color: 'bg-green-100 text-green-800', text: '✅ Activo' }
    : { color: 'bg-red-100 text-red-800', text: '❌ Inactivo' };
}
---

<DashboardLayout title="Gestión de Usuarios">
  <div class="space-y-6">
    <!-- Header -->
    <div class="sm:flex sm:items-center sm:justify-between">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Gestión de Usuarios</h1>
        <p class="mt-2 text-sm text-gray-700">
          Administra usuarios, roles y permisos del sistema
        </p>
      </div>
      <div class="mt-4 sm:mt-0">
        <button
          onclick="openCreateModal()"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700"
        >
          + Nuevo Usuario
        </button>
      </div>
    </div>

    <!-- Alertas -->
    {error && (
      <div class="bg-red-50 border-l-4 border-red-400 p-4">
        <p class="text-red-700">{error}</p>
      </div>
    )}
    
    {success && (
      <div class="bg-green-50 border-l-4 border-green-400 p-4">
        <p class="text-green-700">{success}</p>
      </div>
    )}

    <!-- Estadísticas -->
    <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <span class="text-2xl">👥</span>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Total Usuarios</dt>
                <dd class="text-lg font-medium text-gray-900">{stats.totalUsuarios}</dd>
                <dd class="text-xs text-gray-500">{stats.usuariosActivos} activos</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <span class="text-2xl">👑</span>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Super Admins</dt>
                <dd class="text-lg font-medium text-gray-900">{stats.superAdmins}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <span class="text-2xl">🏢</span>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Managers</dt>
                <dd class="text-lg font-medium text-gray-900">{stats.managers}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <span class="text-2xl">✏️</span>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Editores</dt>
                <dd class="text-lg font-medium text-gray-900">{stats.editors}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tabla de usuarios -->
    <div class="bg-white shadow rounded-lg overflow-hidden">
      <div class="px-4 py-5 sm:p-6">
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Usuario
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Rol
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Último acceso
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Creado
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {usuarios.map((usuario) => {
                const roleInfo = getRoleInfo(usuario.role);
                const statusInfo = getStatusInfo(usuario.status);
                const isLocked = usuario.locked_until && new Date(usuario.locked_until) > new Date();
                
                return (
                  <tr>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-10 w-10">
                          <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                            <span class="text-sm font-medium text-indigo-700">
                              {usuario.name.split(' ').map((n: string) => n[0]).join('').toUpperCase()}
                            </span>
                          </div>
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">{usuario.name}</div>
                          <div class="text-sm text-gray-500">{usuario.email}</div>
                          {isLocked && (
                            <div class="text-xs text-red-500">🔒 Bloqueado</div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${roleInfo.color}`}>
                        {roleInfo.text}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusInfo.color}`}>
                        {statusInfo.text}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(usuario.last_login)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(usuario.created_at)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                      <button
                        onclick={`openEditModal('${usuario.id}', '${usuario.email}', '${usuario.name}', '${usuario.role}')`}
                        class="text-blue-600 hover:text-blue-900"
                      >
                        ✏️ Editar
                      </button>
                      
                      <button
                        onclick={`openPasswordModal('${usuario.id}', '${usuario.name}')`}
                        class="text-indigo-600 hover:text-indigo-900"
                      >
                        🔑 Contraseña
                      </button>
                      
                      <form method="POST" class="inline">
                        <input type="hidden" name="action" value="toggle_status" />
                        <input type="hidden" name="userId" value={usuario.id} />
                        <input type="hidden" name="newStatus" value={usuario.status === 'active' ? 'inactive' : 'active'} />
                        <button
                          type="submit"
                          class={usuario.status === 'active' ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'}
                          onclick={`return confirm('¿Estás seguro de ${usuario.status === 'active' ? 'desactivar' : 'activar'} a ${usuario.name}?')`}
                        >
                          {usuario.status === 'active' ? '❌ Desactivar' : '✅ Activar'}
                        </button>
                      </form>

                      <form method="POST" class="inline">
                        <input type="hidden" name="action" value="delete" />
                        <input type="hidden" name="userId" value={usuario.id} />
                        <button
                          type="submit"
                          class="text-red-600 hover:text-red-900"
                          onclick={`return confirm('¿Estás seguro de eliminar a ${usuario.name}? Esta acción no se puede deshacer.')`}
                        >
                          🗑️ Eliminar
                        </button>
                      </form>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          {usuarios.length === 0 && (
            <div class="text-center py-12">
              <span class="text-4xl">👥</span>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No hay usuarios</h3>
              <p class="mt-1 text-sm text-gray-500">Comienza creando tu primer usuario.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Crear Usuario -->
  <div id="createModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 text-center">Crear Nuevo Usuario</h3>
        <form method="POST" class="mt-4 space-y-4">
          <input type="hidden" name="action" value="create" />
          
          <div>
            <label class="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              name="email"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Nombre completo</label>
            <input
              type="text"
              name="name"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Rol</label>
            <select
              name="role"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">Seleccionar rol</option>
              {currentUser?.role === 'super_admin' && <option value="super_admin">Super Admin</option>}
              <option value="manager">Manager</option>
              <option value="editor">Editor</option>
              <option value="viewer">Visualizador</option>
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Contraseña</label>
            <input
              type="password"
              name="password"
              required
              minlength="8"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
            <p class="mt-1 text-xs text-gray-500">Mínimo 8 caracteres</p>
          </div>

          <div class="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              onclick="closeCreateModal()"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700"
            >
              Crear Usuario
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal Cambiar Contraseña -->
  <div id="passwordModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 text-center">Cambiar Contraseña</h3>
        <p id="passwordUserName" class="text-sm text-gray-500 text-center mt-1"></p>
        <form method="POST" class="mt-4 space-y-4">
          <input type="hidden" name="action" value="reset_password" />
          <input type="hidden" id="passwordUserId" name="userId" value="" />
          
          <div>
            <label class="block text-sm font-medium text-gray-700">Nueva contraseña</label>
            <input
              type="password"
              name="newPassword"
              required
              minlength="8"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
            <p class="mt-1 text-xs text-gray-500">Mínimo 8 caracteres</p>
          </div>

          <div class="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              onclick="closePasswordModal()"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700"
            >
              Cambiar Contraseña
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Modal Editar Usuario -->
  <div id="editModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 text-center">Editar Usuario</h3>
        <form method="POST" class="mt-4 space-y-4">
          <input type="hidden" name="action" value="edit" />
          <input type="hidden" id="editUserId" name="userId" value="" />
          
          <div>
            <label class="block text-sm font-medium text-gray-700">Email</label>
            <input
              type="email"
              id="editEmail"
              name="email"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Nombre completo</label>
            <input
              type="text"
              id="editName"
              name="name"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700">Rol</label>
            <select
              id="editRole"
              name="role"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="">Seleccionar rol</option>
              {currentUser?.role === 'super_admin' && <option value="super_admin">Super Admin</option>}
              <option value="manager">Manager</option>
              <option value="editor">Editor</option>
              <option value="viewer">Visualizador</option>
            </select>
          </div>

          <div class="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              onclick="closeEditModal()"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700"
            >
              Actualizar Usuario
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</DashboardLayout>

<script is:inline>
  console.log('🔧 Script de usuarios cargado');

  function openCreateModal() {
    console.log('🔵 Abriendo modal de crear usuario');
    const modal = document.getElementById('createModal');
    if (modal) {
      modal.classList.remove('hidden');
      console.log('✅ Modal de crear abierto');
    } else {
      console.error('❌ No se encontró el modal createModal');
    }
  }

  function closeCreateModal() {
    console.log('🔴 Cerrando modal de crear usuario');
    const modal = document.getElementById('createModal');
    if (modal) {
      modal.classList.add('hidden');
      console.log('✅ Modal de crear cerrado');
    }
  }

  function openPasswordModal(userId, userName) {
    console.log('🔵 Abriendo modal de contraseña para:', userId, userName);
    const modal = document.getElementById('passwordModal');
    const userNameElement = document.getElementById('passwordUserName');
    const userIdElement = document.getElementById('passwordUserId');
    
    if (modal && userNameElement && userIdElement) {
      userNameElement.textContent = 'Usuario: ' + userName;
      userIdElement.value = userId;
      modal.classList.remove('hidden');
      console.log('✅ Modal de contraseña abierto');
    } else {
      console.error('❌ No se encontraron elementos del modal de contraseña');
    }
  }

  function closePasswordModal() {
    console.log('🔴 Cerrando modal de contraseña');
    const modal = document.getElementById('passwordModal');
    if (modal) {
      modal.classList.add('hidden');
      console.log('✅ Modal de contraseña cerrado');
    }
  }

  function openEditModal(userId, email, name, role) {
    console.log('🔵 Abriendo modal de editar para:', userId, email, name, role);
    const modal = document.getElementById('editModal');
    const userIdElement = document.getElementById('editUserId');
    const emailElement = document.getElementById('editEmail');
    const nameElement = document.getElementById('editName');
    const roleElement = document.getElementById('editRole');
    
    if (modal && userIdElement && emailElement && nameElement && roleElement) {
      userIdElement.value = userId;
      emailElement.value = email;
      nameElement.value = name;
      roleElement.value = role;
      modal.classList.remove('hidden');
      console.log('✅ Modal de editar abierto');
    } else {
      console.error('❌ No se encontraron elementos del modal de editar');
      console.log('Elementos encontrados:', {
        modal: !!modal,
        userIdElement: !!userIdElement,
        emailElement: !!emailElement,
        nameElement: !!nameElement,
        roleElement: !!roleElement
      });
    }
  }

  function closeEditModal() {
    console.log('🔴 Cerrando modal de editar');
    const modal = document.getElementById('editModal');
    if (modal) {
      modal.classList.add('hidden');
      console.log('✅ Modal de editar cerrado');
    }
  }

  // Cerrar modales con ESC
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      console.log('⌨️ ESC presionado, cerrando modales');
      closeCreateModal();
      closePasswordModal();
      closeEditModal();
    }
  });

  // Cerrar modales haciendo clic fuera
  document.addEventListener('click', function(e) {
    const createModal = document.getElementById('createModal');
    const passwordModal = document.getElementById('passwordModal');
    const editModal = document.getElementById('editModal');
    
    if (e.target === createModal) {
      console.log('🖱️ Click fuera del modal crear');
      closeCreateModal();
    }
    if (e.target === passwordModal) {
      console.log('🖱️ Click fuera del modal contraseña');
      closePasswordModal();
    }
    if (e.target === editModal) {
      console.log('🖱️ Click fuera del modal editar');
      closeEditModal();
    }
  });

  console.log('✅ Todas las funciones de usuario definidas');

  // Hacer las funciones globales
  window.openCreateModal = openCreateModal;
  window.closeCreateModal = closeCreateModal;
  window.openPasswordModal = openPasswordModal;
  window.closePasswordModal = closePasswordModal;
  window.openEditModal = openEditModal;
  window.closeEditModal = closeEditModal;
</script>
